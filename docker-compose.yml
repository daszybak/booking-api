version: '3.8'
services:
  booking-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      no_cache: true
    stdin_open: true
    tty: true
    volumes:
      - ./data:/usr/src/app/data
      - ./prisma:/usr/src/app/prisma
      - ./src:/usr/src/app/src
    expose:
      - '3001'
    ports:
      - '3001:3001'
    networks:
      - booking
    env_file:
      - .env
    environment:
      - NODE_ENV=dev
      - DATABASE_URL=${DATABASE_URL}
    command: npm run start:dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 2G

  postgres:
    image: postgres:15.2
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
    restart: always
    networks:
      - booking
    healthcheck:
      test: ['CMD-SHELL', "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3
  redis:
    image: redis:7.0.9-alpine3.17
    ports:
      - 6379:6379
    volumes:
      - redis:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 1s
      timeout: 3s
      retries: 5
    networks:
      - booking

volumes:
  postgres-data:
  redis:
    driver: local

networks:
  booking:
    name: booking
    driver: bridge
